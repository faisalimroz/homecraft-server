generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(uuid())
  fName                 String
  lName                 String
  email                 String    @unique
  password              String
  role                  Role      @default(User)
  contactNo             String
  resetPasswordToken    String?    
  resetPasswordExpire   DateTime?  
  profileImg            String[]
  bookings              Booking[]
  ComboBooking          ComboBooking[]
  reviews               Review[]
  reviewProviders       ReviewProvider[]
  comments              Comment[]
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("users")
}

model Provider { 
  id                  String         @id @default(uuid())
  fName               String
  lName               String
  email               String         @unique
  password            String
  role                ProviderRole   @default(Provider)
  gender              String
  dob                 DateTime       @db.Date
  bio                 String
  categoryId          String? 
  category            Category?      @relation(fields: [categoryId], references: [id])
  contactNo           String
  address             String
  resetPasswordToken  String?   
  resetPasswordExpire DateTime?  
  profileImg          String[]
  services            Service[]
  availability        Availability[]
  reviewProviders     ReviewProvider[]
  offers              Offer[]
  blogs               Blog[]
  comboPack           ComboPack[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  approvalStatus      ApprovalStatus @default(Pending)

  @@map("providers")
}

model Service {
  id                 String       @id @default(uuid())
  serviceName        String       @unique
  description        String
  regularPrice       Int
  offeredPrice       Int?
  location           String
  duration           String
  videoUrl           String?
  serviceImg         String[]
  status             ServiceStatus @default(Active)
  categoryId         String
  keyFeature1        String?
  keyFeature2        String?
  keyFeature3        String?
  keyFeature4        String?
  category           Category      @relation(fields: [categoryId], references: [id])
  providerId         String
  provider           Provider      @relation(fields: [providerId], references: [id])
  offerId            String?       
  offer              Offer?        @relation("ServiceOffer", fields: [offerId], references: [id], onDelete: SetNull)
  bookings           Booking[]
  reviews            Review[]
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  @@map("services")
}

model ComboPack{
   id                 String    @id @default(uuid())
   comboName          String   @unique
   plan               String
   services           String[]
   amount             Int
   discountAmount     Int
   discount           Int
   providerId         String
   provider           Provider      @relation(fields: [providerId], references: [id])
   ComboBooking       ComboBooking[]
  @@map("comboPack")
}


model Category {
  id           String    @id @default(uuid())
  categoryName String   @unique
  categoryImg  String
  categoryIcon String
  services     Service[]
  providers    Provider[]  
  blogs        Blog[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("categories")
}

model Availability {
  id         String   @id @default(uuid())
  day        String   @map("day") 
  slots      String[] @default([]) @map("slots") 
  providerId String
  provider   Provider @relation(fields: [providerId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("availabilities")
}

model Booking {
  id                String          @id @default(uuid())
  bookingDate       DateTime        @map("bookingDate") @db.Date
  Day               String          @map("day")
  Time              String          @map("time")
  userId            String          @map("userId")
  serviceId         String          @map("serviceId")
  isPaid            PaymentStatus   @default(Unpaid)
  status            Status          @default(Pending)
  workStatus        WorkStatus      @default(Pending)
  user              User            @relation(fields: [userId], references: [id])
  service           Service         @relation(fields: [serviceId], references: [id])
  Payment           Payment[]
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  @@unique([Day, Time, serviceId, bookingDate])
  @@map("bookings")
}

model ComboBooking {
  id                String          @id @default(uuid())
  userId            String          @map("userId")
  comboId           String          @map("comboId")
  isPaid            PaymentStatus   @default(Unpaid)
  status            Status          @default(Pending)
  user              User            @relation(fields: [userId], references: [id])
  ComboPack         ComboPack       @relation(fields: [comboId], references: [id])
  ComboPayment      ComboPayment[]
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  
  @@map("comboBookings")
}

model Payment {
  id              String          @id @default(uuid())
  amount          Int
  bookingId       String          @map("bookingId")
  transactionId   String
  address         String
  country         String
  state           String
  city            String
  zipCode         String
  status          Status          @default(Pending)
  booking         Booking         @relation(fields: [bookingId], references: [id])
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  @@map("payment")
}

model ComboPayment {
  id              String          @id @default(uuid())
  amount          Int
  comboBookingId  String          @map("comboBookingId")
  transactionId   String
  address         String
  country         String
  state           String
  city            String
  zipCode         String
  status          Status          @default(Pending)
  ComboBooking    ComboBooking    @relation(fields: [comboBookingId], references: [id])
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  @@map("comboPayment")
}

model Blog {
  id          String        @id @default(uuid())
  title       String        @unique
  content     String
  blogImg     String[]
  categoryId  String
  category    Category      @relation(fields: [categoryId], references: [id])
  providerId  String
  provider    Provider @relation(fields: [providerId], references: [id])
  comments    Comment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("blogs")
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  serviceId  String
  rating     Float
  comment    String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])

  @@map("reviews")
}
model Comment {
  id        String     @id @default(uuid())
  userId    String
  blogId    String
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  blog      Blog  @relation(fields: [blogId], references: [id])
  createdAt DateTime @default(now())

  @@map("comments")
}
model ReviewProvider {
  id         String   @id @default(uuid())
  userId     String
  providerId String
  rating     Float
  comment    String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  provider    Provider  @relation(fields: [providerId], references: [id])

  @@map("reviewProvider")
}

model Offer {
  id           String     @id @default(uuid())
  offerName    String
  startDate    DateTime
  endDate      DateTime
  discount     Int
  status       offerStatus  @default(Active)
  services     Service[]    @relation("ServiceOffer")
  providerId   String
  provider     Provider @relation(fields: [providerId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@map("offers")
}

model Faq {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

enum Role {
  User
  Admin
}

enum ProviderRole {
  Provider
  Admin
  
}

enum ServiceStatus {
  Active
  Inactive
}

enum ApprovalStatus {
  Pending
  Approved
  Rejected
}

enum Status {
  Pending
  Confirmed
  Rejected
}
enum offerStatus {
  Active
  Inactive
  
}
enum WorkStatus {
  Pending
  InProgress
  Completed
  Canceled
}
enum PaymentStatus {
  Unpaid
  Paid
  Cancel
}